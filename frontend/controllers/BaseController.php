<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/12/26 0026
 * Time: 16:52
 */

namespace frontend\controllers;


use common\helpers\CommonHelpers;
use common\models\doctors\DoctorInfos;
use frontend\assets\AppAsset;
use yii\db\ActiveRecord;
use yii\filters\VerbFilter;
use yii\web\Controller;
use yii\web\Response;

class BaseController extends Controller
{
    public $enableCsrfValidation = false;
    public $_userInfo = [];
    public $uid = null;
    const POST = 'POST';
    const GET = 'GET';

    function init()
    {
        \Yii::$app->response->format = Response::FORMAT_JSON;
        if (!\Yii::$app->user->isGuest) {
            $this->_userInfo = [
                'uid' => \Yii::$app->user->identity->getId(),
                'username' => \Yii::$app->user->identity->username,
                'status' => \Yii::$app->user->identity->status,
            ];
//            $this->uid = $this->_userInfo['uid'];
        }
        parent::init(); // TODO: Change the autogenerated stub
    }

    function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
            ],
            'access' => [
                'class' => \yii\filters\AccessControl::className(),
//                'only' => [],
                'rules' => [
                    [
                        'allow' => true,// 设置 actions 的操作是允许访问还是拒绝访问
                        'roles' => ['@'], // @ 当前规则针对认证过的用户， ？所有用户均可访问
//                        'ips' => ['127.0.0.1'],//这里填写允许访问的IP
//                       'actions'=>[], // 当前 rule 将会针对这里设置的 actions 起作用，如果为空，则默认对当前 controller 的所actions 起作用
                    ],
                ],
                'denyCallback' => function ($rule, $action) {//被拒绝后的回调
                    echo json_encode([
                        'code' => 0,
                        'msg' => '请登录后操作'
                    ]);
                    exit();
                },
            ]
        ];
    }

    function getDoctor($uid = null)
    {
        if (!$uid) {
            $uid = \Yii::$app->user->getId();
        }
        $info = DoctorInfos::findOne(['uid' => $uid]);
        return empty($info) ? null : $info;
    }

    //参数1：访问的URL，参数2：post数据(不填则为GET)，参数3：提交的$cookies,参数4：是否返回$cookies
    function curl_request($url, $post = '', $cookie = '', $returnCookie = 0)
    {
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($curl, CURLOPT_AUTOREFERER, 1);
        if ($post) {
            curl_setopt($curl, CURLOPT_POST, 1);
            curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($post));
        }
        if ($cookie) {
            curl_setopt($curl, CURLOPT_COOKIE, $cookie);
        }
        curl_setopt($curl, CURLOPT_HEADER, $returnCookie);
        curl_setopt($curl, CURLOPT_TIMEOUT, 10);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        $data = curl_exec($curl);
        if (curl_errno($curl)) {
            return curl_error($curl);
        }
        curl_close($curl);
        if ($returnCookie) {
            list($header, $body) = explode("\r\n\r\n", $data, 2);
            preg_match_all("/Set\-Cookie:([^;]*);/", $header, $matches);
            $info['cookie'] = substr($matches[1][0], 1);
            $info['content'] = $body;
            return $info;
        } else {
            return $data;
        }
    }

    function __call($name, $params)
    {
        return parent::__call($name, $params); // TODO: Change the autogenerated stub
    }

    function actionError()
    {
        return [
            'code' => '0',
            'msg' => 'not found!',
            'httpCode' => 404
        ];
    }

    function post($key = null, $default = null)
    {
        return \Yii::$app->request->post($key, $default);
    }

    function get($key = null, $default = null)
    {
        return \Yii::$app->request->get($key, $default);
    }
}